name: Execute Test Run

on:
  push:
    branches:
      - main

jobs:
  execute-test-run:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    env:
      IPADDR: 'https://yaswanth01.tenjinonline.com'
      INSID: 'yaswanth01'
      APITOKEN: 'FIzvh1HMkJLQxvvLvITMb4nRxwn66aGaE+H6XUMVYSU43a/Ut9Kiy5iH2lxar/mMg7Y5ffI11EuRbgDIpib3rPKU1OYxqlaq2qWBl3ASVSCi74QVy6KPVurGvCfFOXT47PGV8TSMUEdTjF044FiQN9QTKMmR9PIO5ghOSBAxLLkmjBmVT3gqurULpVI7BWvw0MjE/SqThGfz8ns9RHvziHnEtR8j3NGYTmBXAagsaKVlYc4ZnTFlTIaqVsyjLEN6bF9AyMdVMMJqC0Vj24dvMq8abJ/q/IfrdJhkh+25hgx95rcMpFUg9nAJrcTqgfzNj0ROQg7sqhN0iJ3q0mCViw=='
      AGENTNAME: 'yaswanth'
      INCLUDECLOUDDEVICE: 'FALSE'
      INCLUDECLOUDBROWSER: 'FALSE'
      DEVICENAME: ''
      PROJECTKEY: 'AA'
      BROWSER: 'chrome'
      REGION: 'UTC+05:30'
      TESTRUNID: 'Test-Run-13054499'
      ISCLOUDAGENT: 'FALSE'
      BROWSERVERSION: ''
      OS: 'Windows 8.1'
      RUNONLYFAILED: 'FALSE'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install curl
        run: sudo apt-get install -y curl

      - name: Execute test run
        id: execute
        run: |
          echo "Starting Execute test run step"
          EXECUTE=$(curl -s -k --request POST "$IPADDR/api/rest/1/execute/testrun" \
            --header 'Content-Type: application/json' \
            --header "X-INS-ID: $INSID" \
            --header "X-API-TOKEN: $APITOKEN" \
            --data-raw '{
                   "agentName": "'"$AGENTNAME"'",
                   "includeCloudDevice": "'"$INCLUDECLOUDDEVICE"'",
                   "includeCloudBrowser": "'"$INCLUDECLOUDBROWSER"'",
                   "device": "'"$DEVICENAME"'",
                   "projectKey": "'"$PROJECTKEY"'",
                   "browser": "'"$BROWSER"'",
                   "region": "'"$REGION"'",
                   "testRunId": "'"$TESTRUNID"'",
                   "cloudAgent": "'"$ISCLOUDAGENT"'",
                   "browserVersion": "'"$BROWSERVERSION"'",
                   "os": "'"$OS"'",
                   "reRunFailedCases": "'"$RUNONLYFAILED"'"
                   }')
          echo "EXECUTE response: $EXECUTE"
          value=$(echo $EXECUTE | jq -r '.testRunId')
          echo "Test Run ID: $value"
          if [ -z "$value" ] || [ "$value" == "null" ]; then
            echo "Failed to retrieve test run ID"
            exit 1
          fi
          echo "::set-output name=test_run_id::$value"

      - name: Monitor test run status
        env:
          TEST_RUN_ID: ${{ steps.execute.outputs.test_run_id }}
        run: |
          echo "Starting Monitor test run status step"
          status=''
          agentstatus=''
          response=''
          result=''
          count=0
          end_time=$(($(date +%s) + 3600)) # One hour timeout
          while [[ $status != 'COMPLETED' && $agentstatus != 'TERMINATED' && $agentstatus != 'ERROR' && $(date +%s) -lt $end_time ]]; do
              echo "Loop count: $count"
              echo "Fetching status for test run ID: $TEST_RUN_ID"
              response=$(curl -s -k --request GET "$IPADDR/api/rest/1/testruns/$TEST_RUN_ID/runstatus" \
                --header 'Content-Type: application/json' \
                --header "X-INS-ID: $INSID" \
                --header "X-API-TOKEN: $APITOKEN")
              echo "API response: $response"
              status=$(echo $response | jq -r '.status')
              result=$(echo $response | jq -r '.result')
              agentstatus=$(echo $response | jq -r '.cloudAgentStatus')
              echo "Parsed status: $status"
              echo "Parsed result: $result"
              echo "Parsed agent status: $agentstatus"
              sleep 20
              count=$((count+1))
              if [[ $result == 'FAIL' || $status == 'null' ]]; then
                  echo "Result status is $result"
                  exit 1
              else
                  echo "Result status is $result"
              fi
          done
